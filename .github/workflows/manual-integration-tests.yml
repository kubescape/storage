name: Manual Integration Tests

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run tests on'
        required: true
        default: 'main'
      node_agent_image:
        description: 'Node Agent image (e.g. quay.io/kubescape/node-agent:latest)'
        required: true
        default: 'quay.io/kubescape/node-agent:latest'
      storage_image:
        description: 'Storage image (e.g. quay.io/kubescape/storage:latest)'
        required: true
        default: 'quay.io/kubescape/storage:latest'
      extra_helm_set_args:
        description: 'Extra Helm --set arguments (comma-separated, e.g. foo=bar,bar=baz)'
        required: false
        default: ''

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install dependencies
        run: go mod download

      - name: Set up kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          version: v0.22.0

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install Kubescape via Helm
        run: |
          helm repo add kubescape https://kubescape.github.io/helm-charts/
          helm repo update
          EXTRA_SET_ARGS=""
          if [ -n "${{ github.event.inputs.extra_helm_set_args }}" ]; then
            IFS=',' read -ra ADDR <<< "${{ github.event.inputs.extra_helm_set_args }}"
            for arg in "${ADDR[@]}"; do
              EXTRA_SET_ARGS="$EXTRA_SET_ARGS --set $arg"
            done
          fi
          helm upgrade --install kubescape kubescape/kubescape-operator \
            -n kubescape --create-namespace \
            --set nodeAgent.image.repository=$(echo "${{ github.event.inputs.node_agent_image }}" | cut -d: -f1) \
            --set nodeAgent.image.tag=$(echo "${{ github.event.inputs.node_agent_image }}" | cut -d: -f2-) \
            --set storage.image.repository=$(echo "${{ github.event.inputs.storage_image }}" | cut -d: -f1) \
            --set storage.image.tag=$(echo "${{ github.event.inputs.storage_image }}" | cut -d: -f2-) \
            $EXTRA_SET_ARGS \
            --wait

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run non-failover tests in parallel
        run: |
          cd tests/integration-test-suite
          NON_FAILOVER_TESTS="TestSimpleProfileCreate TestJobProfileCreate TestCronJobProfileCreate TestInitContainerProfileCreate TestSidecarProfileCreate TestInitSidecarProfileCreate TestCrashLoopProfileIncomplete TestCrashLoopAndStableProfileIncomplete TestStatefulSetProfileCleanup"
          for test in $NON_FAILOVER_TESTS; do
            echo "Running $test"
            gotestsum --junitfile "junit-$test.xml" -- -v -run "IntegrationTestSuite/$test$" ./... &
          done
          wait

      - name: Run failover tests sequentially
        run: |
          cd tests/integration-test-suite
          FAILOVER_TESTS="TestSimpleProfileStorageFailover TestSimpleProfileNodeAgentFailover TestLongStorageFailover"
          for test in $FAILOVER_TESTS; do
            echo "Running $test"
            gotestsum --junitfile "junit-$test.xml" -- -v -run "IntegrationTestSuite/$test$" ./...
          done

      - name: Print test summary
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Name | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          for file in tests/integration-test-suite/junit-*.xml; do
            testname=$(basename "$file" .xml)
            result=$(grep -o 'testsuite.*failures="[^"]*"' "$file" | head -1)
            if [[ $result =~ failures="0" ]]; then
              status="✅ PASS"
            else
              status="❌ FAIL"
            fi
            echo "| $testname | $status |" >> $GITHUB_STEP_SUMMARY
          done