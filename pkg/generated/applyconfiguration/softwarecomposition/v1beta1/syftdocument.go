/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// SyftDocumentApplyConfiguration represents a declarative configuration of the SyftDocument type for use
// with apply.
type SyftDocumentApplyConfiguration struct {
	Artifacts             []softwarecompositionv1beta1.SyftPackage `json:"artifacts,omitempty"`
	ArtifactRelationships []SyftRelationshipApplyConfiguration     `json:"artifactRelationships,omitempty"`
	Files                 []SyftFileApplyConfiguration             `json:"files,omitempty"`
	SyftSource            *SyftSourceApplyConfiguration            `json:"source,omitempty"`
	Distro                *LinuxReleaseApplyConfiguration          `json:"distro,omitempty"`
	SyftDescriptor        *SyftDescriptorApplyConfiguration        `json:"descriptor,omitempty"`
	Schema                *SchemaApplyConfiguration                `json:"schema,omitempty"`
}

// SyftDocumentApplyConfiguration constructs a declarative configuration of the SyftDocument type for use with
// apply.
func SyftDocument() *SyftDocumentApplyConfiguration {
	return &SyftDocumentApplyConfiguration{}
}

// WithArtifacts adds the given value to the Artifacts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Artifacts field.
func (b *SyftDocumentApplyConfiguration) WithArtifacts(values ...softwarecompositionv1beta1.SyftPackage) *SyftDocumentApplyConfiguration {
	for i := range values {
		b.Artifacts = append(b.Artifacts, values[i])
	}
	return b
}

// WithArtifactRelationships adds the given value to the ArtifactRelationships field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ArtifactRelationships field.
func (b *SyftDocumentApplyConfiguration) WithArtifactRelationships(values ...*SyftRelationshipApplyConfiguration) *SyftDocumentApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithArtifactRelationships")
		}
		b.ArtifactRelationships = append(b.ArtifactRelationships, *values[i])
	}
	return b
}

// WithFiles adds the given value to the Files field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Files field.
func (b *SyftDocumentApplyConfiguration) WithFiles(values ...*SyftFileApplyConfiguration) *SyftDocumentApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFiles")
		}
		b.Files = append(b.Files, *values[i])
	}
	return b
}

// WithSyftSource sets the SyftSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyftSource field is set to the value of the last call.
func (b *SyftDocumentApplyConfiguration) WithSyftSource(value *SyftSourceApplyConfiguration) *SyftDocumentApplyConfiguration {
	b.SyftSource = value
	return b
}

// WithDistro sets the Distro field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Distro field is set to the value of the last call.
func (b *SyftDocumentApplyConfiguration) WithDistro(value *LinuxReleaseApplyConfiguration) *SyftDocumentApplyConfiguration {
	b.Distro = value
	return b
}

// WithSyftDescriptor sets the SyftDescriptor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyftDescriptor field is set to the value of the last call.
func (b *SyftDocumentApplyConfiguration) WithSyftDescriptor(value *SyftDescriptorApplyConfiguration) *SyftDocumentApplyConfiguration {
	b.SyftDescriptor = value
	return b
}

// WithSchema sets the Schema field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schema field is set to the value of the last call.
func (b *SyftDocumentApplyConfiguration) WithSchema(value *SchemaApplyConfiguration) *SyftDocumentApplyConfiguration {
	b.Schema = value
	return b
}
