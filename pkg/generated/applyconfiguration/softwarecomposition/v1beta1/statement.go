/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// StatementApplyConfiguration represents a declarative configuration of the Statement type for use
// with apply.
type StatementApplyConfiguration struct {
	ID                       *string                                   `json:"@id,omitempty"`
	Vulnerability            *VexVulnerabilityApplyConfiguration       `json:"vulnerability,omitempty"`
	Timestamp                *string                                   `json:"timestamp,omitempty"`
	LastUpdated              *string                                   `json:"last_updated,omitempty"`
	Products                 []ProductApplyConfiguration               `json:"products,omitempty"`
	Status                   *softwarecompositionv1beta1.Status        `json:"status,omitempty"`
	StatusNotes              *string                                   `json:"status_notes,omitempty"`
	Justification            *softwarecompositionv1beta1.Justification `json:"justification,omitempty"`
	ImpactStatement          *string                                   `json:"impact_statement,omitempty"`
	ActionStatement          *string                                   `json:"action_statement,omitempty"`
	ActionStatementTimestamp *string                                   `json:"action_statement_timestamp,omitempty"`
}

// StatementApplyConfiguration constructs a declarative configuration of the Statement type for use with
// apply.
func Statement() *StatementApplyConfiguration {
	return &StatementApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithID(value string) *StatementApplyConfiguration {
	b.ID = &value
	return b
}

// WithVulnerability sets the Vulnerability field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vulnerability field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithVulnerability(value *VexVulnerabilityApplyConfiguration) *StatementApplyConfiguration {
	b.Vulnerability = value
	return b
}

// WithTimestamp sets the Timestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timestamp field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithTimestamp(value string) *StatementApplyConfiguration {
	b.Timestamp = &value
	return b
}

// WithLastUpdated sets the LastUpdated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastUpdated field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithLastUpdated(value string) *StatementApplyConfiguration {
	b.LastUpdated = &value
	return b
}

// WithProducts adds the given value to the Products field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Products field.
func (b *StatementApplyConfiguration) WithProducts(values ...*ProductApplyConfiguration) *StatementApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithProducts")
		}
		b.Products = append(b.Products, *values[i])
	}
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithStatus(value softwarecompositionv1beta1.Status) *StatementApplyConfiguration {
	b.Status = &value
	return b
}

// WithStatusNotes sets the StatusNotes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StatusNotes field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithStatusNotes(value string) *StatementApplyConfiguration {
	b.StatusNotes = &value
	return b
}

// WithJustification sets the Justification field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Justification field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithJustification(value softwarecompositionv1beta1.Justification) *StatementApplyConfiguration {
	b.Justification = &value
	return b
}

// WithImpactStatement sets the ImpactStatement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImpactStatement field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithImpactStatement(value string) *StatementApplyConfiguration {
	b.ImpactStatement = &value
	return b
}

// WithActionStatement sets the ActionStatement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActionStatement field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithActionStatement(value string) *StatementApplyConfiguration {
	b.ActionStatement = &value
	return b
}

// WithActionStatementTimestamp sets the ActionStatementTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActionStatementTimestamp field is set to the value of the last call.
func (b *StatementApplyConfiguration) WithActionStatementTimestamp(value string) *StatementApplyConfiguration {
	b.ActionStatementTimestamp = &value
	return b
}
