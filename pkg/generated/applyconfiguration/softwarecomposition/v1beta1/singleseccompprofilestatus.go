/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// SingleSeccompProfileStatusApplyConfiguration represents a declarative configuration of the SingleSeccompProfileStatus type for use
// with apply.
type SingleSeccompProfileStatusApplyConfiguration struct {
	StatusBaseApplyConfiguration `json:",inline"`
	Path                         *string  `json:"path,omitempty"`
	ActiveWorkloads              []string `json:"activeWorkloads,omitempty"`
	LocalhostProfile             *string  `json:"localhostProfile,omitempty"`
}

// SingleSeccompProfileStatusApplyConfiguration constructs a declarative configuration of the SingleSeccompProfileStatus type for use with
// apply.
func SingleSeccompProfileStatus() *SingleSeccompProfileStatusApplyConfiguration {
	return &SingleSeccompProfileStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *SingleSeccompProfileStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *SingleSeccompProfileStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.ConditionedStatusApplyConfiguration.Conditions = append(b.ConditionedStatusApplyConfiguration.Conditions, *values[i])
	}
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *SingleSeccompProfileStatusApplyConfiguration) WithStatus(value softwarecompositionv1beta1.ProfileState) *SingleSeccompProfileStatusApplyConfiguration {
	b.StatusBaseApplyConfiguration.Status = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *SingleSeccompProfileStatusApplyConfiguration) WithPath(value string) *SingleSeccompProfileStatusApplyConfiguration {
	b.Path = &value
	return b
}

// WithActiveWorkloads adds the given value to the ActiveWorkloads field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ActiveWorkloads field.
func (b *SingleSeccompProfileStatusApplyConfiguration) WithActiveWorkloads(values ...string) *SingleSeccompProfileStatusApplyConfiguration {
	for i := range values {
		b.ActiveWorkloads = append(b.ActiveWorkloads, values[i])
	}
	return b
}

// WithLocalhostProfile sets the LocalhostProfile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocalhostProfile field is set to the value of the last call.
func (b *SingleSeccompProfileStatusApplyConfiguration) WithLocalhostProfile(value string) *SingleSeccompProfileStatusApplyConfiguration {
	b.LocalhostProfile = &value
	return b
}
