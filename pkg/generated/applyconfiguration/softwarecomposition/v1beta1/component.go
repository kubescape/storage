/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// ComponentApplyConfiguration represents a declarative configuration of the Component type for use
// with apply.
type ComponentApplyConfiguration struct {
	ID          *string                                                                  `json:"@id,omitempty"`
	Hashes      map[softwarecompositionv1beta1.Algorithm]softwarecompositionv1beta1.Hash `json:"hashes,omitempty"`
	Identifiers map[softwarecompositionv1beta1.IdentifierType]string                     `json:"identifiers,omitempty"`
	Supplier    *string                                                                  `json:"supplier,omitempty"`
}

// ComponentApplyConfiguration constructs a declarative configuration of the Component type for use with
// apply.
func Component() *ComponentApplyConfiguration {
	return &ComponentApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *ComponentApplyConfiguration) WithID(value string) *ComponentApplyConfiguration {
	b.ID = &value
	return b
}

// WithHashes puts the entries into the Hashes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Hashes field,
// overwriting an existing map entries in Hashes field with the same key.
func (b *ComponentApplyConfiguration) WithHashes(entries map[softwarecompositionv1beta1.Algorithm]softwarecompositionv1beta1.Hash) *ComponentApplyConfiguration {
	if b.Hashes == nil && len(entries) > 0 {
		b.Hashes = make(map[softwarecompositionv1beta1.Algorithm]softwarecompositionv1beta1.Hash, len(entries))
	}
	for k, v := range entries {
		b.Hashes[k] = v
	}
	return b
}

// WithIdentifiers puts the entries into the Identifiers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Identifiers field,
// overwriting an existing map entries in Identifiers field with the same key.
func (b *ComponentApplyConfiguration) WithIdentifiers(entries map[softwarecompositionv1beta1.IdentifierType]string) *ComponentApplyConfiguration {
	if b.Identifiers == nil && len(entries) > 0 {
		b.Identifiers = make(map[softwarecompositionv1beta1.IdentifierType]string, len(entries))
	}
	for k, v := range entries {
		b.Identifiers[k] = v
	}
	return b
}

// WithSupplier sets the Supplier field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Supplier field is set to the value of the last call.
func (b *ComponentApplyConfiguration) WithSupplier(value string) *ComponentApplyConfiguration {
	b.Supplier = &value
	return b
}
