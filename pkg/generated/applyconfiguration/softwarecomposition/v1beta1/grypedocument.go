/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// GrypeDocumentApplyConfiguration represents a declarative configuration of the GrypeDocument type for use
// with apply.
type GrypeDocumentApplyConfiguration struct {
	Matches        []MatchApplyConfiguration        `json:"matches,omitempty"`
	IgnoredMatches []IgnoredMatchApplyConfiguration `json:"ignoredMatches,omitempty"`
	Source         *SourceApplyConfiguration        `json:"source,omitempty"`
	Distro         *DistributionApplyConfiguration  `json:"distro,omitempty"`
	Descriptor_    *DescriptorApplyConfiguration    `json:"descriptor,omitempty"`
}

// GrypeDocumentApplyConfiguration constructs a declarative configuration of the GrypeDocument type for use with
// apply.
func GrypeDocument() *GrypeDocumentApplyConfiguration {
	return &GrypeDocumentApplyConfiguration{}
}

// WithMatches adds the given value to the Matches field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Matches field.
func (b *GrypeDocumentApplyConfiguration) WithMatches(values ...*MatchApplyConfiguration) *GrypeDocumentApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatches")
		}
		b.Matches = append(b.Matches, *values[i])
	}
	return b
}

// WithIgnoredMatches adds the given value to the IgnoredMatches field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IgnoredMatches field.
func (b *GrypeDocumentApplyConfiguration) WithIgnoredMatches(values ...*IgnoredMatchApplyConfiguration) *GrypeDocumentApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIgnoredMatches")
		}
		b.IgnoredMatches = append(b.IgnoredMatches, *values[i])
	}
	return b
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *GrypeDocumentApplyConfiguration) WithSource(value *SourceApplyConfiguration) *GrypeDocumentApplyConfiguration {
	b.Source = value
	return b
}

// WithDistro sets the Distro field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Distro field is set to the value of the last call.
func (b *GrypeDocumentApplyConfiguration) WithDistro(value *DistributionApplyConfiguration) *GrypeDocumentApplyConfiguration {
	b.Distro = value
	return b
}

// WithDescriptor_ sets the Descriptor_ field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Descriptor_ field is set to the value of the last call.
func (b *GrypeDocumentApplyConfiguration) WithDescriptor_(value *DescriptorApplyConfiguration) *GrypeDocumentApplyConfiguration {
	b.Descriptor_ = value
	return b
}
