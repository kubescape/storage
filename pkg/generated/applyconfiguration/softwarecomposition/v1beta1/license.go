/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// LicenseApplyConfiguration represents a declarative configuration of the License type for use
// with apply.
type LicenseApplyConfiguration struct {
	Value          *string                                 `json:"value,omitempty"`
	SPDXExpression *string                                 `json:"spdxExpression,omitempty"`
	Type           *softwarecompositionv1beta1.LicenseType `json:"type,omitempty"`
	URLs           []string                                `json:"urls,omitempty"`
	Locations      []softwarecompositionv1beta1.Location   `json:"locations,omitempty"`
}

// LicenseApplyConfiguration constructs a declarative configuration of the License type for use with
// apply.
func License() *LicenseApplyConfiguration {
	return &LicenseApplyConfiguration{}
}

// WithValue sets the Value field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Value field is set to the value of the last call.
func (b *LicenseApplyConfiguration) WithValue(value string) *LicenseApplyConfiguration {
	b.Value = &value
	return b
}

// WithSPDXExpression sets the SPDXExpression field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SPDXExpression field is set to the value of the last call.
func (b *LicenseApplyConfiguration) WithSPDXExpression(value string) *LicenseApplyConfiguration {
	b.SPDXExpression = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *LicenseApplyConfiguration) WithType(value softwarecompositionv1beta1.LicenseType) *LicenseApplyConfiguration {
	b.Type = &value
	return b
}

// WithURLs adds the given value to the URLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the URLs field.
func (b *LicenseApplyConfiguration) WithURLs(values ...string) *LicenseApplyConfiguration {
	for i := range values {
		b.URLs = append(b.URLs, values[i])
	}
	return b
}

// WithLocations adds the given value to the Locations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Locations field.
func (b *LicenseApplyConfiguration) WithLocations(values ...softwarecompositionv1beta1.Location) *LicenseApplyConfiguration {
	for i := range values {
		b.Locations = append(b.Locations, values[i])
	}
	return b
}
