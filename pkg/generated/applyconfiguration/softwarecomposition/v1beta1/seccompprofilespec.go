/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// SeccompProfileSpecApplyConfiguration represents a declarative configuration of the SeccompProfileSpec type for use
// with apply.
type SeccompProfileSpecApplyConfiguration struct {
	Containers          []SingleSeccompProfileApplyConfiguration `json:"containers,omitempty"`
	InitContainers      []SingleSeccompProfileApplyConfiguration `json:"initContainers,omitempty"`
	EphemeralContainers []SingleSeccompProfileApplyConfiguration `json:"ephemeralContainers,omitempty"`
}

// SeccompProfileSpecApplyConfiguration constructs a declarative configuration of the SeccompProfileSpec type for use with
// apply.
func SeccompProfileSpec() *SeccompProfileSpecApplyConfiguration {
	return &SeccompProfileSpecApplyConfiguration{}
}

// WithContainers adds the given value to the Containers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Containers field.
func (b *SeccompProfileSpecApplyConfiguration) WithContainers(values ...*SingleSeccompProfileApplyConfiguration) *SeccompProfileSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithContainers")
		}
		b.Containers = append(b.Containers, *values[i])
	}
	return b
}

// WithInitContainers adds the given value to the InitContainers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InitContainers field.
func (b *SeccompProfileSpecApplyConfiguration) WithInitContainers(values ...*SingleSeccompProfileApplyConfiguration) *SeccompProfileSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInitContainers")
		}
		b.InitContainers = append(b.InitContainers, *values[i])
	}
	return b
}

// WithEphemeralContainers adds the given value to the EphemeralContainers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EphemeralContainers field.
func (b *SeccompProfileSpecApplyConfiguration) WithEphemeralContainers(values ...*SingleSeccompProfileApplyConfiguration) *SeccompProfileSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEphemeralContainers")
		}
		b.EphemeralContainers = append(b.EphemeralContainers, *values[i])
	}
	return b
}
