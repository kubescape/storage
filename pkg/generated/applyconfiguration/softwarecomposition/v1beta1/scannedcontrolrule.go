/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
)

// ScannedControlRuleApplyConfiguration represents a declarative configuration of the ScannedControlRule type for use
// with apply.
type ScannedControlRuleApplyConfiguration struct {
	Name                  *string                       `json:"name,omitempty"`
	Status                *RuleStatusApplyConfiguration `json:"status,omitempty"`
	ControlConfigurations map[string]json.RawMessage    `json:"controlConfigurations,omitempty"`
	Paths                 []RulePathApplyConfiguration  `json:"paths,omitempty"`
	AppliedIgnoreRules    []string                      `json:"appliedIgnoreRules,omitempty"`
	RelatedResourcesIDs   []string                      `json:"relatedResourcesIDs,omitempty"`
}

// ScannedControlRuleApplyConfiguration constructs a declarative configuration of the ScannedControlRule type for use with
// apply.
func ScannedControlRule() *ScannedControlRuleApplyConfiguration {
	return &ScannedControlRuleApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ScannedControlRuleApplyConfiguration) WithName(value string) *ScannedControlRuleApplyConfiguration {
	b.Name = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *ScannedControlRuleApplyConfiguration) WithStatus(value *RuleStatusApplyConfiguration) *ScannedControlRuleApplyConfiguration {
	b.Status = value
	return b
}

// WithControlConfigurations puts the entries into the ControlConfigurations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ControlConfigurations field,
// overwriting an existing map entries in ControlConfigurations field with the same key.
func (b *ScannedControlRuleApplyConfiguration) WithControlConfigurations(entries map[string]json.RawMessage) *ScannedControlRuleApplyConfiguration {
	if b.ControlConfigurations == nil && len(entries) > 0 {
		b.ControlConfigurations = make(map[string]json.RawMessage, len(entries))
	}
	for k, v := range entries {
		b.ControlConfigurations[k] = v
	}
	return b
}

// WithPaths adds the given value to the Paths field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Paths field.
func (b *ScannedControlRuleApplyConfiguration) WithPaths(values ...*RulePathApplyConfiguration) *ScannedControlRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPaths")
		}
		b.Paths = append(b.Paths, *values[i])
	}
	return b
}

// WithAppliedIgnoreRules adds the given value to the AppliedIgnoreRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AppliedIgnoreRules field.
func (b *ScannedControlRuleApplyConfiguration) WithAppliedIgnoreRules(values ...string) *ScannedControlRuleApplyConfiguration {
	for i := range values {
		b.AppliedIgnoreRules = append(b.AppliedIgnoreRules, values[i])
	}
	return b
}

// WithRelatedResourcesIDs adds the given value to the RelatedResourcesIDs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RelatedResourcesIDs field.
func (b *ScannedControlRuleApplyConfiguration) WithRelatedResourcesIDs(values ...string) *ScannedControlRuleApplyConfiguration {
	for i := range values {
		b.RelatedResourcesIDs = append(b.RelatedResourcesIDs, values[i])
	}
	return b
}
