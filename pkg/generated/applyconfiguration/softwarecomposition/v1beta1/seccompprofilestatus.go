/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// SeccompProfileStatusApplyConfiguration represents a declarative configuration of the SeccompProfileStatus type for use
// with apply.
type SeccompProfileStatusApplyConfiguration struct {
	Containers map[string]SingleSeccompProfileStatusApplyConfiguration `json:"containers,omitempty"`
}

// SeccompProfileStatusApplyConfiguration constructs a declarative configuration of the SeccompProfileStatus type for use with
// apply.
func SeccompProfileStatus() *SeccompProfileStatusApplyConfiguration {
	return &SeccompProfileStatusApplyConfiguration{}
}

// WithContainers puts the entries into the Containers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Containers field,
// overwriting an existing map entries in Containers field with the same key.
func (b *SeccompProfileStatusApplyConfiguration) WithContainers(entries map[string]SingleSeccompProfileStatusApplyConfiguration) *SeccompProfileStatusApplyConfiguration {
	if b.Containers == nil && len(entries) > 0 {
		b.Containers = make(map[string]SingleSeccompProfileStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Containers[k] = v
	}
	return b
}
