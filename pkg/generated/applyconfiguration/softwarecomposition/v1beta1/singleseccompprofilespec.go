/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	seccomp "github.com/containers/common/pkg/seccomp"
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// SingleSeccompProfileSpecApplyConfiguration represents a declarative configuration of the SingleSeccompProfileSpec type for use
// with apply.
type SingleSeccompProfileSpecApplyConfiguration struct {
	SpecBaseApplyConfiguration `json:",inline"`
	BaseProfileName            *string                               `json:"baseProfileName,omitempty"`
	DefaultAction              *seccomp.Action                       `json:"defaultAction,omitempty"`
	Architectures              []softwarecompositionv1beta1.Arch     `json:"architectures,omitempty"`
	ListenerPath               *string                               `json:"listenerPath,omitempty"`
	ListenerMetadata           *string                               `json:"listenerMetadata,omitempty"`
	Syscalls                   []*softwarecompositionv1beta1.Syscall `json:"syscalls,omitempty"`
	Flags                      []softwarecompositionv1beta1.Flag     `json:"flags,omitempty"`
}

// SingleSeccompProfileSpecApplyConfiguration constructs a declarative configuration of the SingleSeccompProfileSpec type for use with
// apply.
func SingleSeccompProfileSpec() *SingleSeccompProfileSpecApplyConfiguration {
	return &SingleSeccompProfileSpecApplyConfiguration{}
}

// WithDisabled sets the Disabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Disabled field is set to the value of the last call.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithDisabled(value bool) *SingleSeccompProfileSpecApplyConfiguration {
	b.SpecBaseApplyConfiguration.Disabled = &value
	return b
}

// WithBaseProfileName sets the BaseProfileName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BaseProfileName field is set to the value of the last call.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithBaseProfileName(value string) *SingleSeccompProfileSpecApplyConfiguration {
	b.BaseProfileName = &value
	return b
}

// WithDefaultAction sets the DefaultAction field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultAction field is set to the value of the last call.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithDefaultAction(value seccomp.Action) *SingleSeccompProfileSpecApplyConfiguration {
	b.DefaultAction = &value
	return b
}

// WithArchitectures adds the given value to the Architectures field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Architectures field.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithArchitectures(values ...softwarecompositionv1beta1.Arch) *SingleSeccompProfileSpecApplyConfiguration {
	for i := range values {
		b.Architectures = append(b.Architectures, values[i])
	}
	return b
}

// WithListenerPath sets the ListenerPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ListenerPath field is set to the value of the last call.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithListenerPath(value string) *SingleSeccompProfileSpecApplyConfiguration {
	b.ListenerPath = &value
	return b
}

// WithListenerMetadata sets the ListenerMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ListenerMetadata field is set to the value of the last call.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithListenerMetadata(value string) *SingleSeccompProfileSpecApplyConfiguration {
	b.ListenerMetadata = &value
	return b
}

// WithSyscalls adds the given value to the Syscalls field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Syscalls field.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithSyscalls(values ...**softwarecompositionv1beta1.Syscall) *SingleSeccompProfileSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSyscalls")
		}
		b.Syscalls = append(b.Syscalls, *values[i])
	}
	return b
}

// WithFlags adds the given value to the Flags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Flags field.
func (b *SingleSeccompProfileSpecApplyConfiguration) WithFlags(values ...softwarecompositionv1beta1.Flag) *SingleSeccompProfileSpecApplyConfiguration {
	for i := range values {
		b.Flags = append(b.Flags, values[i])
	}
	return b
}
