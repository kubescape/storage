/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	seccomp "github.com/containers/common/pkg/seccomp"
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// SyscallApplyConfiguration represents a declarative configuration of the Syscall type for use
// with apply.
type SyscallApplyConfiguration struct {
	Names    []string                          `json:"names,omitempty"`
	Action   *seccomp.Action                   `json:"action,omitempty"`
	ErrnoRet *uint64                           `json:"errnoRet,omitempty"`
	Args     []*softwarecompositionv1beta1.Arg `json:"args,omitempty"`
}

// SyscallApplyConfiguration constructs a declarative configuration of the Syscall type for use with
// apply.
func Syscall() *SyscallApplyConfiguration {
	return &SyscallApplyConfiguration{}
}

// WithNames adds the given value to the Names field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Names field.
func (b *SyscallApplyConfiguration) WithNames(values ...string) *SyscallApplyConfiguration {
	for i := range values {
		b.Names = append(b.Names, values[i])
	}
	return b
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *SyscallApplyConfiguration) WithAction(value seccomp.Action) *SyscallApplyConfiguration {
	b.Action = &value
	return b
}

// WithErrnoRet sets the ErrnoRet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ErrnoRet field is set to the value of the last call.
func (b *SyscallApplyConfiguration) WithErrnoRet(value uint64) *SyscallApplyConfiguration {
	b.ErrnoRet = &value
	return b
}

// WithArgs adds the given value to the Args field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Args field.
func (b *SyscallApplyConfiguration) WithArgs(values ...**softwarecompositionv1beta1.Arg) *SyscallApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithArgs")
		}
		b.Args = append(b.Args, *values[i])
	}
	return b
}
