/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// PackageBasicDataApplyConfiguration represents a declarative configuration of the PackageBasicData type for use
// with apply.
type PackageBasicDataApplyConfiguration struct {
	ID        *string                               `json:"id,omitempty"`
	Name      *string                               `json:"name,omitempty"`
	Version   *string                               `json:"version,omitempty"`
	Type      *string                               `json:"type,omitempty"`
	FoundBy   *string                               `json:"foundBy,omitempty"`
	Locations []softwarecompositionv1beta1.Location `json:"locations,omitempty"`
	Licenses  *softwarecompositionv1beta1.Licenses  `json:"licenses,omitempty"`
	Language  *string                               `json:"language,omitempty"`
	CPEs      *softwarecompositionv1beta1.CPEs      `json:"cpes,omitempty"`
	PURL      *string                               `json:"purl,omitempty"`
}

// PackageBasicDataApplyConfiguration constructs a declarative configuration of the PackageBasicData type for use with
// apply.
func PackageBasicData() *PackageBasicDataApplyConfiguration {
	return &PackageBasicDataApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithID(value string) *PackageBasicDataApplyConfiguration {
	b.ID = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithName(value string) *PackageBasicDataApplyConfiguration {
	b.Name = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithVersion(value string) *PackageBasicDataApplyConfiguration {
	b.Version = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithType(value string) *PackageBasicDataApplyConfiguration {
	b.Type = &value
	return b
}

// WithFoundBy sets the FoundBy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FoundBy field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithFoundBy(value string) *PackageBasicDataApplyConfiguration {
	b.FoundBy = &value
	return b
}

// WithLocations adds the given value to the Locations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Locations field.
func (b *PackageBasicDataApplyConfiguration) WithLocations(values ...softwarecompositionv1beta1.Location) *PackageBasicDataApplyConfiguration {
	for i := range values {
		b.Locations = append(b.Locations, values[i])
	}
	return b
}

// WithLicenses sets the Licenses field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Licenses field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithLicenses(value softwarecompositionv1beta1.Licenses) *PackageBasicDataApplyConfiguration {
	b.Licenses = &value
	return b
}

// WithLanguage sets the Language field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Language field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithLanguage(value string) *PackageBasicDataApplyConfiguration {
	b.Language = &value
	return b
}

// WithCPEs sets the CPEs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CPEs field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithCPEs(value softwarecompositionv1beta1.CPEs) *PackageBasicDataApplyConfiguration {
	b.CPEs = &value
	return b
}

// WithPURL sets the PURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PURL field is set to the value of the last call.
func (b *PackageBasicDataApplyConfiguration) WithPURL(value string) *PackageBasicDataApplyConfiguration {
	b.PURL = &value
	return b
}
