/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// ApplicationProfileContainerApplyConfiguration represents a declarative configuration of the ApplicationProfileContainer type for use
// with apply.
type ApplicationProfileContainerApplyConfiguration struct {
	Name                 *string                                 `json:"name,omitempty"`
	Capabilities         []string                                `json:"capabilities,omitempty"`
	Execs                []ExecCallsApplyConfiguration           `json:"execs,omitempty"`
	Opens                []OpenCallsApplyConfiguration           `json:"opens,omitempty"`
	Syscalls             []string                                `json:"syscalls,omitempty"`
	SeccompProfile       *SingleSeccompProfileApplyConfiguration `json:"seccompProfile,omitempty"`
	Endpoints            []HTTPEndpointApplyConfiguration        `json:"endpoints,omitempty"`
	ImageID              *string                                 `json:"imageID,omitempty"`
	ImageTag             *string                                 `json:"imageTag,omitempty"`
	PolicyByRuleId       map[string]RulePolicyApplyConfiguration `json:"rulePolicies,omitempty"`
	IdentifiedCallStacks []IdentifiedCallStackApplyConfiguration `json:"identifiedCallStacks,omitempty"`
}

// ApplicationProfileContainerApplyConfiguration constructs a declarative configuration of the ApplicationProfileContainer type for use with
// apply.
func ApplicationProfileContainer() *ApplicationProfileContainerApplyConfiguration {
	return &ApplicationProfileContainerApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ApplicationProfileContainerApplyConfiguration) WithName(value string) *ApplicationProfileContainerApplyConfiguration {
	b.Name = &value
	return b
}

// WithCapabilities adds the given value to the Capabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Capabilities field.
func (b *ApplicationProfileContainerApplyConfiguration) WithCapabilities(values ...string) *ApplicationProfileContainerApplyConfiguration {
	for i := range values {
		b.Capabilities = append(b.Capabilities, values[i])
	}
	return b
}

// WithExecs adds the given value to the Execs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Execs field.
func (b *ApplicationProfileContainerApplyConfiguration) WithExecs(values ...*ExecCallsApplyConfiguration) *ApplicationProfileContainerApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExecs")
		}
		b.Execs = append(b.Execs, *values[i])
	}
	return b
}

// WithOpens adds the given value to the Opens field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Opens field.
func (b *ApplicationProfileContainerApplyConfiguration) WithOpens(values ...*OpenCallsApplyConfiguration) *ApplicationProfileContainerApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOpens")
		}
		b.Opens = append(b.Opens, *values[i])
	}
	return b
}

// WithSyscalls adds the given value to the Syscalls field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Syscalls field.
func (b *ApplicationProfileContainerApplyConfiguration) WithSyscalls(values ...string) *ApplicationProfileContainerApplyConfiguration {
	for i := range values {
		b.Syscalls = append(b.Syscalls, values[i])
	}
	return b
}

// WithSeccompProfile sets the SeccompProfile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SeccompProfile field is set to the value of the last call.
func (b *ApplicationProfileContainerApplyConfiguration) WithSeccompProfile(value *SingleSeccompProfileApplyConfiguration) *ApplicationProfileContainerApplyConfiguration {
	b.SeccompProfile = value
	return b
}

// WithEndpoints adds the given value to the Endpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Endpoints field.
func (b *ApplicationProfileContainerApplyConfiguration) WithEndpoints(values ...*HTTPEndpointApplyConfiguration) *ApplicationProfileContainerApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEndpoints")
		}
		b.Endpoints = append(b.Endpoints, *values[i])
	}
	return b
}

// WithImageID sets the ImageID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageID field is set to the value of the last call.
func (b *ApplicationProfileContainerApplyConfiguration) WithImageID(value string) *ApplicationProfileContainerApplyConfiguration {
	b.ImageID = &value
	return b
}

// WithImageTag sets the ImageTag field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageTag field is set to the value of the last call.
func (b *ApplicationProfileContainerApplyConfiguration) WithImageTag(value string) *ApplicationProfileContainerApplyConfiguration {
	b.ImageTag = &value
	return b
}

// WithPolicyByRuleId puts the entries into the PolicyByRuleId field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PolicyByRuleId field,
// overwriting an existing map entries in PolicyByRuleId field with the same key.
func (b *ApplicationProfileContainerApplyConfiguration) WithPolicyByRuleId(entries map[string]RulePolicyApplyConfiguration) *ApplicationProfileContainerApplyConfiguration {
	if b.PolicyByRuleId == nil && len(entries) > 0 {
		b.PolicyByRuleId = make(map[string]RulePolicyApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.PolicyByRuleId[k] = v
	}
	return b
}

// WithIdentifiedCallStacks adds the given value to the IdentifiedCallStacks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IdentifiedCallStacks field.
func (b *ApplicationProfileContainerApplyConfiguration) WithIdentifiedCallStacks(values ...*IdentifiedCallStackApplyConfiguration) *ApplicationProfileContainerApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIdentifiedCallStacks")
		}
		b.IdentifiedCallStacks = append(b.IdentifiedCallStacks, *values[i])
	}
	return b
}
