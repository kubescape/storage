/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// GrypePackageApplyConfiguration represents a declarative configuration of the GrypePackage type for use
// with apply.
type GrypePackageApplyConfiguration struct {
	Name         *string                                  `json:"name,omitempty"`
	Version      *string                                  `json:"version,omitempty"`
	Type         *softwarecompositionv1beta1.SyftType     `json:"type,omitempty"`
	Locations    []SyftCoordinatesApplyConfiguration      `json:"locations,omitempty"`
	Language     *softwarecompositionv1beta1.SyftLanguage `json:"language,omitempty"`
	Licenses     []string                                 `json:"licenses,omitempty"`
	CPEs         []string                                 `json:"cpes,omitempty"`
	PURL         *string                                  `json:"purl,omitempty"`
	Upstreams    []UpstreamPackageApplyConfiguration      `json:"upstreams,omitempty"`
	MetadataType *softwarecompositionv1beta1.MetadataType `json:"metadataType,omitempty"`
	Metadata     *json.RawMessage                         `json:"metadata,omitempty"`
}

// GrypePackageApplyConfiguration constructs a declarative configuration of the GrypePackage type for use with
// apply.
func GrypePackage() *GrypePackageApplyConfiguration {
	return &GrypePackageApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *GrypePackageApplyConfiguration) WithName(value string) *GrypePackageApplyConfiguration {
	b.Name = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *GrypePackageApplyConfiguration) WithVersion(value string) *GrypePackageApplyConfiguration {
	b.Version = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *GrypePackageApplyConfiguration) WithType(value softwarecompositionv1beta1.SyftType) *GrypePackageApplyConfiguration {
	b.Type = &value
	return b
}

// WithLocations adds the given value to the Locations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Locations field.
func (b *GrypePackageApplyConfiguration) WithLocations(values ...*SyftCoordinatesApplyConfiguration) *GrypePackageApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLocations")
		}
		b.Locations = append(b.Locations, *values[i])
	}
	return b
}

// WithLanguage sets the Language field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Language field is set to the value of the last call.
func (b *GrypePackageApplyConfiguration) WithLanguage(value softwarecompositionv1beta1.SyftLanguage) *GrypePackageApplyConfiguration {
	b.Language = &value
	return b
}

// WithLicenses adds the given value to the Licenses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Licenses field.
func (b *GrypePackageApplyConfiguration) WithLicenses(values ...string) *GrypePackageApplyConfiguration {
	for i := range values {
		b.Licenses = append(b.Licenses, values[i])
	}
	return b
}

// WithCPEs adds the given value to the CPEs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CPEs field.
func (b *GrypePackageApplyConfiguration) WithCPEs(values ...string) *GrypePackageApplyConfiguration {
	for i := range values {
		b.CPEs = append(b.CPEs, values[i])
	}
	return b
}

// WithPURL sets the PURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PURL field is set to the value of the last call.
func (b *GrypePackageApplyConfiguration) WithPURL(value string) *GrypePackageApplyConfiguration {
	b.PURL = &value
	return b
}

// WithUpstreams adds the given value to the Upstreams field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Upstreams field.
func (b *GrypePackageApplyConfiguration) WithUpstreams(values ...*UpstreamPackageApplyConfiguration) *GrypePackageApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithUpstreams")
		}
		b.Upstreams = append(b.Upstreams, *values[i])
	}
	return b
}

// WithMetadataType sets the MetadataType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MetadataType field is set to the value of the last call.
func (b *GrypePackageApplyConfiguration) WithMetadataType(value softwarecompositionv1beta1.MetadataType) *GrypePackageApplyConfiguration {
	b.MetadataType = &value
	return b
}

// WithMetadata sets the Metadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Metadata field is set to the value of the last call.
func (b *GrypePackageApplyConfiguration) WithMetadata(value json.RawMessage) *GrypePackageApplyConfiguration {
	b.Metadata = &value
	return b
}
