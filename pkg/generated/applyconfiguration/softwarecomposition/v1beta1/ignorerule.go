/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// IgnoreRuleApplyConfiguration represents a declarative configuration of the IgnoreRule type for use
// with apply.
type IgnoreRuleApplyConfiguration struct {
	Vulnerability *string                              `json:"vulnerability,omitempty"`
	FixState      *string                              `json:"fix-state,omitempty"`
	Package       *IgnoreRulePackageApplyConfiguration `json:"package,omitempty"`
}

// IgnoreRuleApplyConfiguration constructs a declarative configuration of the IgnoreRule type for use with
// apply.
func IgnoreRule() *IgnoreRuleApplyConfiguration {
	return &IgnoreRuleApplyConfiguration{}
}

// WithVulnerability sets the Vulnerability field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vulnerability field is set to the value of the last call.
func (b *IgnoreRuleApplyConfiguration) WithVulnerability(value string) *IgnoreRuleApplyConfiguration {
	b.Vulnerability = &value
	return b
}

// WithFixState sets the FixState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FixState field is set to the value of the last call.
func (b *IgnoreRuleApplyConfiguration) WithFixState(value string) *IgnoreRuleApplyConfiguration {
	b.FixState = &value
	return b
}

// WithPackage sets the Package field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Package field is set to the value of the last call.
func (b *IgnoreRuleApplyConfiguration) WithPackage(value *IgnoreRulePackageApplyConfiguration) *IgnoreRuleApplyConfiguration {
	b.Package = value
	return b
}
