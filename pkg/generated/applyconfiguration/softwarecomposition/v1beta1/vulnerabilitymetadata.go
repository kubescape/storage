/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// VulnerabilityMetadataApplyConfiguration represents a declarative configuration of the VulnerabilityMetadata type for use
// with apply.
type VulnerabilityMetadataApplyConfiguration struct {
	ID          *string                  `json:"id,omitempty"`
	DataSource  *string                  `json:"dataSource,omitempty"`
	Namespace   *string                  `json:"namespace,omitempty"`
	Severity    *string                  `json:"severity,omitempty"`
	URLs        []string                 `json:"urls,omitempty"`
	Description *string                  `json:"description,omitempty"`
	Cvss        []CvssApplyConfiguration `json:"cvss,omitempty"`
}

// VulnerabilityMetadataApplyConfiguration constructs a declarative configuration of the VulnerabilityMetadata type for use with
// apply.
func VulnerabilityMetadata() *VulnerabilityMetadataApplyConfiguration {
	return &VulnerabilityMetadataApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *VulnerabilityMetadataApplyConfiguration) WithID(value string) *VulnerabilityMetadataApplyConfiguration {
	b.ID = &value
	return b
}

// WithDataSource sets the DataSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataSource field is set to the value of the last call.
func (b *VulnerabilityMetadataApplyConfiguration) WithDataSource(value string) *VulnerabilityMetadataApplyConfiguration {
	b.DataSource = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *VulnerabilityMetadataApplyConfiguration) WithNamespace(value string) *VulnerabilityMetadataApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithSeverity sets the Severity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Severity field is set to the value of the last call.
func (b *VulnerabilityMetadataApplyConfiguration) WithSeverity(value string) *VulnerabilityMetadataApplyConfiguration {
	b.Severity = &value
	return b
}

// WithURLs adds the given value to the URLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the URLs field.
func (b *VulnerabilityMetadataApplyConfiguration) WithURLs(values ...string) *VulnerabilityMetadataApplyConfiguration {
	for i := range values {
		b.URLs = append(b.URLs, values[i])
	}
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *VulnerabilityMetadataApplyConfiguration) WithDescription(value string) *VulnerabilityMetadataApplyConfiguration {
	b.Description = &value
	return b
}

// WithCvss adds the given value to the Cvss field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Cvss field.
func (b *VulnerabilityMetadataApplyConfiguration) WithCvss(values ...*CvssApplyConfiguration) *VulnerabilityMetadataApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCvss")
		}
		b.Cvss = append(b.Cvss, *values[i])
	}
	return b
}
