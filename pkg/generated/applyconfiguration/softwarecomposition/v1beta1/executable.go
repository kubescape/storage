/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	softwarecompositionv1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
)

// ExecutableApplyConfiguration represents a declarative configuration of the Executable type for use
// with apply.
type ExecutableApplyConfiguration struct {
	Format              *softwarecompositionv1beta1.ExecutableFormat `json:"format,omitempty"`
	HasExports          *bool                                        `json:"hasExports,omitempty"`
	HasEntrypoint       *bool                                        `json:"hasEntrypoint,omitempty"`
	ImportedLibraries   []string                                     `json:"importedLibraries,omitempty"`
	ELFSecurityFeatures *ELFSecurityFeaturesApplyConfiguration       `json:"elfSecurityFeatures,omitempty"`
}

// ExecutableApplyConfiguration constructs a declarative configuration of the Executable type for use with
// apply.
func Executable() *ExecutableApplyConfiguration {
	return &ExecutableApplyConfiguration{}
}

// WithFormat sets the Format field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Format field is set to the value of the last call.
func (b *ExecutableApplyConfiguration) WithFormat(value softwarecompositionv1beta1.ExecutableFormat) *ExecutableApplyConfiguration {
	b.Format = &value
	return b
}

// WithHasExports sets the HasExports field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HasExports field is set to the value of the last call.
func (b *ExecutableApplyConfiguration) WithHasExports(value bool) *ExecutableApplyConfiguration {
	b.HasExports = &value
	return b
}

// WithHasEntrypoint sets the HasEntrypoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HasEntrypoint field is set to the value of the last call.
func (b *ExecutableApplyConfiguration) WithHasEntrypoint(value bool) *ExecutableApplyConfiguration {
	b.HasEntrypoint = &value
	return b
}

// WithImportedLibraries adds the given value to the ImportedLibraries field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImportedLibraries field.
func (b *ExecutableApplyConfiguration) WithImportedLibraries(values ...string) *ExecutableApplyConfiguration {
	for i := range values {
		b.ImportedLibraries = append(b.ImportedLibraries, values[i])
	}
	return b
}

// WithELFSecurityFeatures sets the ELFSecurityFeatures field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ELFSecurityFeatures field is set to the value of the last call.
func (b *ExecutableApplyConfiguration) WithELFSecurityFeatures(value *ELFSecurityFeaturesApplyConfiguration) *ExecutableApplyConfiguration {
	b.ELFSecurityFeatures = value
	return b
}
