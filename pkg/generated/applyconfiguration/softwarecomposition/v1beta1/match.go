/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// MatchApplyConfiguration represents a declarative configuration of the Match type for use
// with apply.
type MatchApplyConfiguration struct {
	Vulnerability          *VulnerabilityApplyConfiguration          `json:"vulnerability,omitempty"`
	RelatedVulnerabilities []VulnerabilityMetadataApplyConfiguration `json:"relatedVulnerabilities,omitempty"`
	MatchDetails           []MatchDetailsApplyConfiguration          `json:"matchDetails,omitempty"`
	Artifact               *GrypePackageApplyConfiguration           `json:"artifact,omitempty"`
}

// MatchApplyConfiguration constructs a declarative configuration of the Match type for use with
// apply.
func Match() *MatchApplyConfiguration {
	return &MatchApplyConfiguration{}
}

// WithVulnerability sets the Vulnerability field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vulnerability field is set to the value of the last call.
func (b *MatchApplyConfiguration) WithVulnerability(value *VulnerabilityApplyConfiguration) *MatchApplyConfiguration {
	b.Vulnerability = value
	return b
}

// WithRelatedVulnerabilities adds the given value to the RelatedVulnerabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RelatedVulnerabilities field.
func (b *MatchApplyConfiguration) WithRelatedVulnerabilities(values ...*VulnerabilityMetadataApplyConfiguration) *MatchApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRelatedVulnerabilities")
		}
		b.RelatedVulnerabilities = append(b.RelatedVulnerabilities, *values[i])
	}
	return b
}

// WithMatchDetails adds the given value to the MatchDetails field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchDetails field.
func (b *MatchApplyConfiguration) WithMatchDetails(values ...*MatchDetailsApplyConfiguration) *MatchApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchDetails")
		}
		b.MatchDetails = append(b.MatchDetails, *values[i])
	}
	return b
}

// WithArtifact sets the Artifact field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Artifact field is set to the value of the last call.
func (b *MatchApplyConfiguration) WithArtifact(value *GrypePackageApplyConfiguration) *MatchApplyConfiguration {
	b.Artifact = value
	return b
}
