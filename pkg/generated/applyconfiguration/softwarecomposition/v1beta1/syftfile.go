/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// SyftFileApplyConfiguration represents a declarative configuration of the SyftFile type for use
// with apply.
type SyftFileApplyConfiguration struct {
	ID         *string                              `json:"id,omitempty"`
	Location   *CoordinatesApplyConfiguration       `json:"location,omitempty"`
	Metadata   *FileMetadataEntryApplyConfiguration `json:"metadata,omitempty"`
	Contents   *string                              `json:"contents,omitempty"`
	Digests    []DigestApplyConfiguration           `json:"digests,omitempty"`
	Licenses   []FileLicenseApplyConfiguration      `json:"licenses,omitempty"`
	Executable *ExecutableApplyConfiguration        `json:"executable,omitempty"`
}

// SyftFileApplyConfiguration constructs a declarative configuration of the SyftFile type for use with
// apply.
func SyftFile() *SyftFileApplyConfiguration {
	return &SyftFileApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *SyftFileApplyConfiguration) WithID(value string) *SyftFileApplyConfiguration {
	b.ID = &value
	return b
}

// WithLocation sets the Location field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Location field is set to the value of the last call.
func (b *SyftFileApplyConfiguration) WithLocation(value *CoordinatesApplyConfiguration) *SyftFileApplyConfiguration {
	b.Location = value
	return b
}

// WithMetadata sets the Metadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Metadata field is set to the value of the last call.
func (b *SyftFileApplyConfiguration) WithMetadata(value *FileMetadataEntryApplyConfiguration) *SyftFileApplyConfiguration {
	b.Metadata = value
	return b
}

// WithContents sets the Contents field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Contents field is set to the value of the last call.
func (b *SyftFileApplyConfiguration) WithContents(value string) *SyftFileApplyConfiguration {
	b.Contents = &value
	return b
}

// WithDigests adds the given value to the Digests field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Digests field.
func (b *SyftFileApplyConfiguration) WithDigests(values ...*DigestApplyConfiguration) *SyftFileApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDigests")
		}
		b.Digests = append(b.Digests, *values[i])
	}
	return b
}

// WithLicenses adds the given value to the Licenses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Licenses field.
func (b *SyftFileApplyConfiguration) WithLicenses(values ...*FileLicenseApplyConfiguration) *SyftFileApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLicenses")
		}
		b.Licenses = append(b.Licenses, *values[i])
	}
	return b
}

// WithExecutable sets the Executable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Executable field is set to the value of the last call.
func (b *SyftFileApplyConfiguration) WithExecutable(value *ExecutableApplyConfiguration) *SyftFileApplyConfiguration {
	b.Executable = value
	return b
}
