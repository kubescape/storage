/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// MetadataApplyConfiguration represents a declarative configuration of the Metadata type for use
// with apply.
type MetadataApplyConfiguration struct {
	Context     *string `json:"@context,omitempty"`
	ID          *string `json:"@id,omitempty"`
	Author      *string `json:"author,omitempty"`
	AuthorRole  *string `json:"role,omitempty"`
	Timestamp   *string `json:"timestamp,omitempty"`
	LastUpdated *string `json:"last_updated,omitempty"`
	Version     *int64  `json:"version,omitempty"`
	Tooling     *string `json:"tooling,omitempty"`
	Supplier    *string `json:"supplier,omitempty"`
}

// MetadataApplyConfiguration constructs a declarative configuration of the Metadata type for use with
// apply.
func Metadata() *MetadataApplyConfiguration {
	return &MetadataApplyConfiguration{}
}

// WithContext sets the Context field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Context field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithContext(value string) *MetadataApplyConfiguration {
	b.Context = &value
	return b
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithID(value string) *MetadataApplyConfiguration {
	b.ID = &value
	return b
}

// WithAuthor sets the Author field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Author field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithAuthor(value string) *MetadataApplyConfiguration {
	b.Author = &value
	return b
}

// WithAuthorRole sets the AuthorRole field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuthorRole field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithAuthorRole(value string) *MetadataApplyConfiguration {
	b.AuthorRole = &value
	return b
}

// WithTimestamp sets the Timestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timestamp field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithTimestamp(value string) *MetadataApplyConfiguration {
	b.Timestamp = &value
	return b
}

// WithLastUpdated sets the LastUpdated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastUpdated field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithLastUpdated(value string) *MetadataApplyConfiguration {
	b.LastUpdated = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithVersion(value int64) *MetadataApplyConfiguration {
	b.Version = &value
	return b
}

// WithTooling sets the Tooling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tooling field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithTooling(value string) *MetadataApplyConfiguration {
	b.Tooling = &value
	return b
}

// WithSupplier sets the Supplier field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Supplier field is set to the value of the last call.
func (b *MetadataApplyConfiguration) WithSupplier(value string) *MetadataApplyConfiguration {
	b.Supplier = &value
	return b
}
