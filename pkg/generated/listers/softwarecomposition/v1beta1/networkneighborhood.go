/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkNeighborhoodLister helps list NetworkNeighborhoods.
// All objects returned here must be treated as read-only.
type NetworkNeighborhoodLister interface {
	// List lists all NetworkNeighborhoods in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NetworkNeighborhood, err error)
	// NetworkNeighborhoods returns an object that can list and get NetworkNeighborhoods.
	NetworkNeighborhoods(namespace string) NetworkNeighborhoodNamespaceLister
	NetworkNeighborhoodListerExpansion
}

// networkNeighborhoodLister implements the NetworkNeighborhoodLister interface.
type networkNeighborhoodLister struct {
	indexer cache.Indexer
}

// NewNetworkNeighborhoodLister returns a new NetworkNeighborhoodLister.
func NewNetworkNeighborhoodLister(indexer cache.Indexer) NetworkNeighborhoodLister {
	return &networkNeighborhoodLister{indexer: indexer}
}

// List lists all NetworkNeighborhoods in the indexer.
func (s *networkNeighborhoodLister) List(selector labels.Selector) (ret []*v1beta1.NetworkNeighborhood, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NetworkNeighborhood))
	})
	return ret, err
}

// NetworkNeighborhoods returns an object that can list and get NetworkNeighborhoods.
func (s *networkNeighborhoodLister) NetworkNeighborhoods(namespace string) NetworkNeighborhoodNamespaceLister {
	return networkNeighborhoodNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkNeighborhoodNamespaceLister helps list and get NetworkNeighborhoods.
// All objects returned here must be treated as read-only.
type NetworkNeighborhoodNamespaceLister interface {
	// List lists all NetworkNeighborhoods in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NetworkNeighborhood, err error)
	// Get retrieves the NetworkNeighborhood from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NetworkNeighborhood, error)
	NetworkNeighborhoodNamespaceListerExpansion
}

// networkNeighborhoodNamespaceLister implements the NetworkNeighborhoodNamespaceLister
// interface.
type networkNeighborhoodNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkNeighborhoods in the indexer for a given namespace.
func (s networkNeighborhoodNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.NetworkNeighborhood, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NetworkNeighborhood))
	})
	return ret, err
}

// Get retrieves the NetworkNeighborhood from the indexer for a given namespace and name.
func (s networkNeighborhoodNamespaceLister) Get(name string) (*v1beta1.NetworkNeighborhood, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("networkneighborhood"), name)
	}
	return obj.(*v1beta1.NetworkNeighborhood), nil
}
