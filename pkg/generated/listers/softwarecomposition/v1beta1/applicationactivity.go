/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationActivityLister helps list ApplicationActivities.
// All objects returned here must be treated as read-only.
type ApplicationActivityLister interface {
	// List lists all ApplicationActivities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ApplicationActivity, err error)
	// ApplicationActivities returns an object that can list and get ApplicationActivities.
	ApplicationActivities(namespace string) ApplicationActivityNamespaceLister
	ApplicationActivityListerExpansion
}

// applicationActivityLister implements the ApplicationActivityLister interface.
type applicationActivityLister struct {
	indexer cache.Indexer
}

// NewApplicationActivityLister returns a new ApplicationActivityLister.
func NewApplicationActivityLister(indexer cache.Indexer) ApplicationActivityLister {
	return &applicationActivityLister{indexer: indexer}
}

// List lists all ApplicationActivities in the indexer.
func (s *applicationActivityLister) List(selector labels.Selector) (ret []*v1beta1.ApplicationActivity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ApplicationActivity))
	})
	return ret, err
}

// ApplicationActivities returns an object that can list and get ApplicationActivities.
func (s *applicationActivityLister) ApplicationActivities(namespace string) ApplicationActivityNamespaceLister {
	return applicationActivityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationActivityNamespaceLister helps list and get ApplicationActivities.
// All objects returned here must be treated as read-only.
type ApplicationActivityNamespaceLister interface {
	// List lists all ApplicationActivities in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ApplicationActivity, err error)
	// Get retrieves the ApplicationActivity from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ApplicationActivity, error)
	ApplicationActivityNamespaceListerExpansion
}

// applicationActivityNamespaceLister implements the ApplicationActivityNamespaceLister
// interface.
type applicationActivityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationActivities in the indexer for a given namespace.
func (s applicationActivityNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ApplicationActivity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ApplicationActivity))
	})
	return ret, err
}

// Get retrieves the ApplicationActivity from the indexer for a given namespace and name.
func (s applicationActivityNamespaceLister) Get(name string) (*v1beta1.ApplicationActivity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("applicationactivity"), name)
	}
	return obj.(*v1beta1.ApplicationActivity), nil
}
