/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationScanSummaryLister helps list ConfigurationScanSummaries.
// All objects returned here must be treated as read-only.
type ConfigurationScanSummaryLister interface {
	// List lists all ConfigurationScanSummaries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ConfigurationScanSummary, err error)
	// ConfigurationScanSummaries returns an object that can list and get ConfigurationScanSummaries.
	ConfigurationScanSummaries(namespace string) ConfigurationScanSummaryNamespaceLister
	ConfigurationScanSummaryListerExpansion
}

// configurationScanSummaryLister implements the ConfigurationScanSummaryLister interface.
type configurationScanSummaryLister struct {
	indexer cache.Indexer
}

// NewConfigurationScanSummaryLister returns a new ConfigurationScanSummaryLister.
func NewConfigurationScanSummaryLister(indexer cache.Indexer) ConfigurationScanSummaryLister {
	return &configurationScanSummaryLister{indexer: indexer}
}

// List lists all ConfigurationScanSummaries in the indexer.
func (s *configurationScanSummaryLister) List(selector labels.Selector) (ret []*v1beta1.ConfigurationScanSummary, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ConfigurationScanSummary))
	})
	return ret, err
}

// ConfigurationScanSummaries returns an object that can list and get ConfigurationScanSummaries.
func (s *configurationScanSummaryLister) ConfigurationScanSummaries(namespace string) ConfigurationScanSummaryNamespaceLister {
	return configurationScanSummaryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationScanSummaryNamespaceLister helps list and get ConfigurationScanSummaries.
// All objects returned here must be treated as read-only.
type ConfigurationScanSummaryNamespaceLister interface {
	// List lists all ConfigurationScanSummaries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ConfigurationScanSummary, err error)
	// Get retrieves the ConfigurationScanSummary from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ConfigurationScanSummary, error)
	ConfigurationScanSummaryNamespaceListerExpansion
}

// configurationScanSummaryNamespaceLister implements the ConfigurationScanSummaryNamespaceLister
// interface.
type configurationScanSummaryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationScanSummaries in the indexer for a given namespace.
func (s configurationScanSummaryNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ConfigurationScanSummary, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ConfigurationScanSummary))
	})
	return ret, err
}

// Get retrieves the ConfigurationScanSummary from the indexer for a given namespace and name.
func (s configurationScanSummaryNamespaceLister) Get(name string) (*v1beta1.ConfigurationScanSummary, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("configurationscansummary"), name)
	}
	return obj.(*v1beta1.ConfigurationScanSummary), nil
}
