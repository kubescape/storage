/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkNeighborsLister helps list NetworkNeighborses.
// All objects returned here must be treated as read-only.
type NetworkNeighborsLister interface {
	// List lists all NetworkNeighborses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NetworkNeighbors, err error)
	// NetworkNeighborses returns an object that can list and get NetworkNeighborses.
	NetworkNeighborses(namespace string) NetworkNeighborsNamespaceLister
	NetworkNeighborsListerExpansion
}

// networkNeighborsLister implements the NetworkNeighborsLister interface.
type networkNeighborsLister struct {
	indexer cache.Indexer
}

// NewNetworkNeighborsLister returns a new NetworkNeighborsLister.
func NewNetworkNeighborsLister(indexer cache.Indexer) NetworkNeighborsLister {
	return &networkNeighborsLister{indexer: indexer}
}

// List lists all NetworkNeighborses in the indexer.
func (s *networkNeighborsLister) List(selector labels.Selector) (ret []*v1beta1.NetworkNeighbors, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NetworkNeighbors))
	})
	return ret, err
}

// NetworkNeighborses returns an object that can list and get NetworkNeighborses.
func (s *networkNeighborsLister) NetworkNeighborses(namespace string) NetworkNeighborsNamespaceLister {
	return networkNeighborsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkNeighborsNamespaceLister helps list and get NetworkNeighborses.
// All objects returned here must be treated as read-only.
type NetworkNeighborsNamespaceLister interface {
	// List lists all NetworkNeighborses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NetworkNeighbors, err error)
	// Get retrieves the NetworkNeighbors from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NetworkNeighbors, error)
	NetworkNeighborsNamespaceListerExpansion
}

// networkNeighborsNamespaceLister implements the NetworkNeighborsNamespaceLister
// interface.
type networkNeighborsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkNeighborses in the indexer for a given namespace.
func (s networkNeighborsNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.NetworkNeighbors, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NetworkNeighbors))
	})
	return ret, err
}

// Get retrieves the NetworkNeighbors from the indexer for a given namespace and name.
func (s networkNeighborsNamespaceLister) Get(name string) (*v1beta1.NetworkNeighbors, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("networkneighbors"), name)
	}
	return obj.(*v1beta1.NetworkNeighbors), nil
}
