/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SBOMSyftFilteredLister helps list SBOMSyftFiltereds.
// All objects returned here must be treated as read-only.
type SBOMSyftFilteredLister interface {
	// List lists all SBOMSyftFiltereds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SBOMSyftFiltered, err error)
	// SBOMSyftFiltereds returns an object that can list and get SBOMSyftFiltereds.
	SBOMSyftFiltereds(namespace string) SBOMSyftFilteredNamespaceLister
	SBOMSyftFilteredListerExpansion
}

// sBOMSyftFilteredLister implements the SBOMSyftFilteredLister interface.
type sBOMSyftFilteredLister struct {
	indexer cache.Indexer
}

// NewSBOMSyftFilteredLister returns a new SBOMSyftFilteredLister.
func NewSBOMSyftFilteredLister(indexer cache.Indexer) SBOMSyftFilteredLister {
	return &sBOMSyftFilteredLister{indexer: indexer}
}

// List lists all SBOMSyftFiltereds in the indexer.
func (s *sBOMSyftFilteredLister) List(selector labels.Selector) (ret []*v1beta1.SBOMSyftFiltered, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SBOMSyftFiltered))
	})
	return ret, err
}

// SBOMSyftFiltereds returns an object that can list and get SBOMSyftFiltereds.
func (s *sBOMSyftFilteredLister) SBOMSyftFiltereds(namespace string) SBOMSyftFilteredNamespaceLister {
	return sBOMSyftFilteredNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SBOMSyftFilteredNamespaceLister helps list and get SBOMSyftFiltereds.
// All objects returned here must be treated as read-only.
type SBOMSyftFilteredNamespaceLister interface {
	// List lists all SBOMSyftFiltereds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SBOMSyftFiltered, err error)
	// Get retrieves the SBOMSyftFiltered from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.SBOMSyftFiltered, error)
	SBOMSyftFilteredNamespaceListerExpansion
}

// sBOMSyftFilteredNamespaceLister implements the SBOMSyftFilteredNamespaceLister
// interface.
type sBOMSyftFilteredNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SBOMSyftFiltereds in the indexer for a given namespace.
func (s sBOMSyftFilteredNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SBOMSyftFiltered, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SBOMSyftFiltered))
	})
	return ret, err
}

// Get retrieves the SBOMSyftFiltered from the indexer for a given namespace and name.
func (s sBOMSyftFilteredNamespaceLister) Get(name string) (*v1beta1.SBOMSyftFiltered, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("sbomsyftfiltered"), name)
	}
	return obj.(*v1beta1.SBOMSyftFiltered), nil
}
