/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SBOMSPDXv2p3Lister helps list SBOMSPDXv2p3s.
// All objects returned here must be treated as read-only.
type SBOMSPDXv2p3Lister interface {
	// List lists all SBOMSPDXv2p3s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SBOMSPDXv2p3, err error)
	// SBOMSPDXv2p3s returns an object that can list and get SBOMSPDXv2p3s.
	SBOMSPDXv2p3s(namespace string) SBOMSPDXv2p3NamespaceLister
	SBOMSPDXv2p3ListerExpansion
}

// sBOMSPDXv2p3Lister implements the SBOMSPDXv2p3Lister interface.
type sBOMSPDXv2p3Lister struct {
	indexer cache.Indexer
}

// NewSBOMSPDXv2p3Lister returns a new SBOMSPDXv2p3Lister.
func NewSBOMSPDXv2p3Lister(indexer cache.Indexer) SBOMSPDXv2p3Lister {
	return &sBOMSPDXv2p3Lister{indexer: indexer}
}

// List lists all SBOMSPDXv2p3s in the indexer.
func (s *sBOMSPDXv2p3Lister) List(selector labels.Selector) (ret []*v1beta1.SBOMSPDXv2p3, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SBOMSPDXv2p3))
	})
	return ret, err
}

// SBOMSPDXv2p3s returns an object that can list and get SBOMSPDXv2p3s.
func (s *sBOMSPDXv2p3Lister) SBOMSPDXv2p3s(namespace string) SBOMSPDXv2p3NamespaceLister {
	return sBOMSPDXv2p3NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SBOMSPDXv2p3NamespaceLister helps list and get SBOMSPDXv2p3s.
// All objects returned here must be treated as read-only.
type SBOMSPDXv2p3NamespaceLister interface {
	// List lists all SBOMSPDXv2p3s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SBOMSPDXv2p3, err error)
	// Get retrieves the SBOMSPDXv2p3 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.SBOMSPDXv2p3, error)
	SBOMSPDXv2p3NamespaceListerExpansion
}

// sBOMSPDXv2p3NamespaceLister implements the SBOMSPDXv2p3NamespaceLister
// interface.
type sBOMSPDXv2p3NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SBOMSPDXv2p3s in the indexer for a given namespace.
func (s sBOMSPDXv2p3NamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SBOMSPDXv2p3, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SBOMSPDXv2p3))
	})
	return ret, err
}

// Get retrieves the SBOMSPDXv2p3 from the indexer for a given namespace and name.
func (s sBOMSPDXv2p3NamespaceLister) Get(name string) (*v1beta1.SBOMSPDXv2p3, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("sbomspdxv2p3"), name)
	}
	return obj.(*v1beta1.SBOMSPDXv2p3), nil
}
