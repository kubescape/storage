/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadConfigurationScanLister helps list WorkloadConfigurationScans.
// All objects returned here must be treated as read-only.
type WorkloadConfigurationScanLister interface {
	// List lists all WorkloadConfigurationScans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.WorkloadConfigurationScan, err error)
	// WorkloadConfigurationScans returns an object that can list and get WorkloadConfigurationScans.
	WorkloadConfigurationScans(namespace string) WorkloadConfigurationScanNamespaceLister
	WorkloadConfigurationScanListerExpansion
}

// workloadConfigurationScanLister implements the WorkloadConfigurationScanLister interface.
type workloadConfigurationScanLister struct {
	indexer cache.Indexer
}

// NewWorkloadConfigurationScanLister returns a new WorkloadConfigurationScanLister.
func NewWorkloadConfigurationScanLister(indexer cache.Indexer) WorkloadConfigurationScanLister {
	return &workloadConfigurationScanLister{indexer: indexer}
}

// List lists all WorkloadConfigurationScans in the indexer.
func (s *workloadConfigurationScanLister) List(selector labels.Selector) (ret []*v1beta1.WorkloadConfigurationScan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.WorkloadConfigurationScan))
	})
	return ret, err
}

// WorkloadConfigurationScans returns an object that can list and get WorkloadConfigurationScans.
func (s *workloadConfigurationScanLister) WorkloadConfigurationScans(namespace string) WorkloadConfigurationScanNamespaceLister {
	return workloadConfigurationScanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkloadConfigurationScanNamespaceLister helps list and get WorkloadConfigurationScans.
// All objects returned here must be treated as read-only.
type WorkloadConfigurationScanNamespaceLister interface {
	// List lists all WorkloadConfigurationScans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.WorkloadConfigurationScan, err error)
	// Get retrieves the WorkloadConfigurationScan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.WorkloadConfigurationScan, error)
	WorkloadConfigurationScanNamespaceListerExpansion
}

// workloadConfigurationScanNamespaceLister implements the WorkloadConfigurationScanNamespaceLister
// interface.
type workloadConfigurationScanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkloadConfigurationScans in the indexer for a given namespace.
func (s workloadConfigurationScanNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.WorkloadConfigurationScan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.WorkloadConfigurationScan))
	})
	return ret, err
}

// Get retrieves the WorkloadConfigurationScan from the indexer for a given namespace and name.
func (s workloadConfigurationScanNamespaceLister) Get(name string) (*v1beta1.WorkloadConfigurationScan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("workloadconfigurationscan"), name)
	}
	return obj.(*v1beta1.WorkloadConfigurationScan), nil
}
