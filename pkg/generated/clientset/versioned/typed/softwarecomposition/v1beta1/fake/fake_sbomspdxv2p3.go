/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/kubescape/storage/pkg/apis/softwarecomposition/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSBOMSPDXv2p3s implements SBOMSPDXv2p3Interface
type FakeSBOMSPDXv2p3s struct {
	Fake *FakeSpdxV1beta1
	ns   string
}

var sbomspdxv2p3sResource = v1beta1.SchemeGroupVersion.WithResource("sbomspdxv2p3s")

var sbomspdxv2p3sKind = v1beta1.SchemeGroupVersion.WithKind("SBOMSPDXv2p3")

// Get takes name of the sBOMSPDXv2p3, and returns the corresponding sBOMSPDXv2p3 object, and an error if there is any.
func (c *FakeSBOMSPDXv2p3s) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.SBOMSPDXv2p3, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(sbomspdxv2p3sResource, c.ns, name), &v1beta1.SBOMSPDXv2p3{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SBOMSPDXv2p3), err
}

// List takes label and field selectors, and returns the list of SBOMSPDXv2p3s that match those selectors.
func (c *FakeSBOMSPDXv2p3s) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.SBOMSPDXv2p3List, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(sbomspdxv2p3sResource, sbomspdxv2p3sKind, c.ns, opts), &v1beta1.SBOMSPDXv2p3List{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.SBOMSPDXv2p3List{ListMeta: obj.(*v1beta1.SBOMSPDXv2p3List).ListMeta}
	for _, item := range obj.(*v1beta1.SBOMSPDXv2p3List).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested sBOMSPDXv2p3s.
func (c *FakeSBOMSPDXv2p3s) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(sbomspdxv2p3sResource, c.ns, opts))

}

// Create takes the representation of a sBOMSPDXv2p3 and creates it.  Returns the server's representation of the sBOMSPDXv2p3, and an error, if there is any.
func (c *FakeSBOMSPDXv2p3s) Create(ctx context.Context, sBOMSPDXv2p3 *v1beta1.SBOMSPDXv2p3, opts v1.CreateOptions) (result *v1beta1.SBOMSPDXv2p3, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(sbomspdxv2p3sResource, c.ns, sBOMSPDXv2p3), &v1beta1.SBOMSPDXv2p3{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SBOMSPDXv2p3), err
}

// Update takes the representation of a sBOMSPDXv2p3 and updates it. Returns the server's representation of the sBOMSPDXv2p3, and an error, if there is any.
func (c *FakeSBOMSPDXv2p3s) Update(ctx context.Context, sBOMSPDXv2p3 *v1beta1.SBOMSPDXv2p3, opts v1.UpdateOptions) (result *v1beta1.SBOMSPDXv2p3, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(sbomspdxv2p3sResource, c.ns, sBOMSPDXv2p3), &v1beta1.SBOMSPDXv2p3{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SBOMSPDXv2p3), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSBOMSPDXv2p3s) UpdateStatus(ctx context.Context, sBOMSPDXv2p3 *v1beta1.SBOMSPDXv2p3, opts v1.UpdateOptions) (*v1beta1.SBOMSPDXv2p3, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(sbomspdxv2p3sResource, "status", c.ns, sBOMSPDXv2p3), &v1beta1.SBOMSPDXv2p3{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SBOMSPDXv2p3), err
}

// Delete takes name of the sBOMSPDXv2p3 and deletes it. Returns an error if one occurs.
func (c *FakeSBOMSPDXv2p3s) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(sbomspdxv2p3sResource, c.ns, name, opts), &v1beta1.SBOMSPDXv2p3{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSBOMSPDXv2p3s) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(sbomspdxv2p3sResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.SBOMSPDXv2p3List{})
	return err
}

// Patch applies the patch and returns the patched sBOMSPDXv2p3.
func (c *FakeSBOMSPDXv2p3s) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.SBOMSPDXv2p3, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(sbomspdxv2p3sResource, c.ns, name, pt, data, subresources...), &v1beta1.SBOMSPDXv2p3{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SBOMSPDXv2p3), err
}
